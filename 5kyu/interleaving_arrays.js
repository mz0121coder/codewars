/*
Create a function, that accepts an arbitrary number of arrays and returns a single array generated by alternately appending elements from the passed in arguments. If one of them is shorter than the others, the result should be padded with empty elements.

Examples:

interleave([1, 2, 3], ["c", "d", "e"]) === [1, "c", 2, "d", 3, "e"]
interleave([1, 2, 3], [4, 5]) === [1, 4, 2, 5, 3, null]
interleave([1, 2, 3], [4, 5, 6], [7, 8, 9]) === [1, 4, 7, 2, 5, 8, 3, 6, 9]
interleave([]) === []
*/
/*
get max length of any array from the arguments
const result = []
loop from 0 to max - 1
on each iteration:
nested loop through arguments(use spread operator)
if there is an item in the array at current index, add it to result
otherwise add null 
return result
*/

function interleave() {
	const max = Math.max(...[...arguments].map(item => item.length));
	const result = [];
	for (let i = 0; i < max; i++) {
		[...arguments].forEach(item => result.push(item[i] ?? null));
	}
	return result;
}

console.log(interleave([1, 2, 3], ['c', 'd', 'e'])); //, [1, "c", 2, "d", 3, "e"]);
console.log(interleave([1, 2, 3], [4, 5])); //, [1, 4, 2, 5, 3, null]);
console.log(interleave([1, 2, 3], [4, 5, 6], [7, 8, 9])); //, [1, 4, 7, 2, 5, 8, 3, 6, 9]);
console.log(interleave([])); //, []);
